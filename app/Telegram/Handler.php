<?php

namespace App\Telegram;

use App\Enums\StatusNumberEnum;
use App\Enums\TypeNumberEnum;
use App\Enums\UserTypeEnum;
use App\Jobs\DeactivateNumberJob;
use App\Services\BuyerService;
use App\Services\NumberService;
use App\Services\NumberStateService;
use App\Services\NumberStatisticService;
use App\Services\SalesmanService;
use App\Services\UserStatisticsService;
use Carbon\Carbon;
use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Stringable;

class Handler extends WebhookHandler
{
    protected SalesmanService $salesmanService;
    protected BuyerService $buyerService;
    protected NumberService $numberService;
    protected NumberStateService $numberStateService;
    protected NumberStatisticService $numberStatisticService;
    protected UserStatisticsService $userStatisticsService;

    public function __construct(
        SalesmanService        $salesmanService,
        NumberService          $numberService,
        NumberStateService     $numberStateService,
        BuyerService           $buyerService,
        NumberStatisticService $numberStatisticService,
        UserStatisticsService  $userStatisticsService,
    )
    {
        parent::__construct();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ $salesmanService
        $this->salesmanService = $salesmanService;
        $this->numberService = $numberService;
        $this->numberStateService = $numberStateService;
        $this->buyerService = $buyerService;
        $this->numberStatisticService = $numberStatisticService;
        $this->userStatisticsService = $userStatisticsService;
    }

    public function start()
    {
        $this->reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!');

        $this->chat
            ->message('<b>–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.</b>')
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å')->action('storeBuyer'),
                        Button::make('–ü—Ä–æ–¥–∞–≤–µ—Ü')->action('salesman'),
                    ])
            )
            ->send();
    }

    public function storeBuyer()
    {
        $uuid = $this->chat->chat_id;

        $salesman = $this->salesmanService->getSalesman($uuid);

        if (!$salesman) {

            $this->reply($this->buyerService->storeBuyer($uuid));

            $this->chat
                ->message('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.</b>')
                ->keyboard(
                    Keyboard::make()->buttons(
                        [
                            Button::make('–ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä')->action('buyNumbers'),
                            Button::make('–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞')->action('getNumbersBuyer'),
                            Button::make('–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')->action('getUserStatistics')->param('buyer', true),
                            Button::make('–ù–∞–∑–∞–¥')->action('start'),
                        ])
                )
                ->send();
        } else {
            (new ButtonsConstruct($this->chat, "<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü.</b>", "–ù–∞–∑–∞–¥", "start"))->storeButton();
        }
    }

    public function buyNumbers()
    {
        $this->chat
            ->message('<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞</b>')
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('üîµ Telegram')->action('getNumbersSalesmen')->param('provider', TypeNumberEnum::telegram->name),
                        Button::make('üü¢ WhatsApp')->action('getNumbersSalesmen')->param('provider', TypeNumberEnum::whatsapp->name),
                        Button::make('–ù–∞–∑–∞–¥')->action('storeBuyer'),
                    ])
            )
            ->send();
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    public function getNumbersSalesmen()
    {
        $provider = $this->data->get('provider');

        $numbers = $this->buyerService->getNumbersSalesman($provider);

        if (count($numbers) < 1) {
            (new ButtonsConstruct($this->chat, "<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤</b>", '–ù–∞–∑–∞–¥', 'buyNumbers'))
                ->storeButton();
            return;
        }

        $buttons = [];

        foreach ($numbers as $number) {
            $buttons[] = Button::make($number->number)->action('byuNumber')->param('number', $number->number);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
        $this->chat
            ->message('<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:</b>')
            ->keyboard(Keyboard::make()->buttons($buttons)->chunk(2)) // –†–∞–∑–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
            ->send();

        (new ButtonsConstruct($this->chat, "<b>–ù–∞–∂–∞–≤ –Ω–∞ –Ω–æ–º–µ—Ä –≤—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ –µ–≥–æ –ø–æ–∫—É–ø–∫—É</b>", '–ù–∞–∑–∞–¥', 'buyNumbers'))
            ->storeButton();
    }

    //–ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
    public function byuNumber()
    {
        $number = $this->numberService->getNumber($this->data->get('number'));

        //–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–º–µ—Ä –∏ –∑–∞–≤–æ–¥–∏–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞(–¥–æ–¥–µ–ª–∞—Ç—å –≤–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã)
        $this->numberStateService->pendingCode($this->chat->chat_id, $number->type_number->name, $number->number);
        $this->numberService->updateStatusNumber($number->type_number->name, $number->number);

        $this->chat
            ->message('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>')
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥')->action('getCode')->param('number', $number->number),
                        Button::make('–ù–∞–∑–∞–¥')->action('buyNumbers'),
                    ])
            )
            ->send();
    }

    //–ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞(–∫–æ–¥–∞)
    public function getCode()
    {
        $this->chat
            ->message('<b>–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥. –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã. –£ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏</b>')
//            ->keyboard(
//                Keyboard::make()->buttons(
//                    [
//                        Button::make('–ö–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª')->action('repeatGetCode')->param('number', $this->data->get('number')),
//                    ])
//            )
            ->send();

        //–ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É, –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        $number_state = $this->numberStateService->getPendingCodeNumber($this->data->get('number'), $this->chat->chat_id);

        if (!$number_state) {
            (new ButtonsConstruct($this->chat, "<b>–û—à–∏–±–∫–∞ –≤ –ø–æ–∫—É–ø–∫–µ –Ω–æ–º–µ—Ä–∞. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.</b>", "–ù–∞–∑–∞–¥", "buyNumbers"))->storeButton();
        } else {
            $this->processNumberState($number_state);
        }
    }

//    public function repeatGetCode()
//    {
//        $number_state = $this->numberStateService->getPendingCodeNumber($this->data->get('number'), $this->chat->chat_id);
//        if (!$number_state) {
//            $this->reply("–ù–æ–º–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {$this->data->get('number')}.</b>");
//        } else {
//            $number_state->increment('request_count');
//            //–∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å 2 –º–∏–Ω—É—Ç–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
//            $this->processNumberState($number_state);
//        }
//
//    }

    private function processNumberState($number_state)
    {
        //–¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É job 2 –º–∏–Ω—É—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ –¥–µ–∞–∫—Ç–∏–≤
        dispatch(new DeactivateNumberJob($number_state->number, $number_state->buyer_id))->delay(now()->addMinutes(2));

        Telegraph::chat($number_state->seller_id)
            ->message("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {$number_state->number}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 –º–∏–Ω—É—Ç. –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ <b>799999999:1234</b>")
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('–ö–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª')->action('noCodeForSalesman')->param('number', $number_state->number),
                    ])
            )
            ->send();
    }

    public function noCodeForSalesman()
    {
        $number_state = $this->numberStateService->getPendingCodeNumberWihtSeller($this->data->get('number'), $this->chat->chat_id);
        if (!$number_state) {
            $this->reply("–ù–æ–º–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {$this->data->get('number')}.");
        } else {
            $number_state->increment('request_count');
            Telegraph::chat($number_state->seller_id)
                ->message("–ï—Å–ª–∏ –∫–æ–¥ —Å–Ω–æ–≤–∞ –Ω–µ –ø—Ä–∏—à–µ–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä")
                ->keyboard(
                    Keyboard::make()->buttons(
                        [
                            Button::make('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å')->action('deactivateNumber')->param('number', $number_state->number),
                        ])
                )
                ->send();
        }
    }

    public function deactivateNumber()
    {
        $state = $this->numberStateService->getDeactiveNumberWihtSeller($this->data->get('number'), $this->chat->chat_id);

        Telegraph::chat($state->buyer_id)
            ->message("<b>–ù–æ–º–µ—Ä {$state->number} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>")
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä')->action('buyNumbers'),
                    ])
            )
            ->send();

        $state->delete();
        $number = $this->numberService->getNumber($this->data->get('number'));
        $number->update(['status_number' => StatusNumberEnum::failed]);
        (new ButtonsConstruct($this->chat, "<b>–ù–æ–º–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {$this->data->get('number')}.</b>", "–ù–∞–∑–∞–¥", "salesman"))->storeButton();
    }

    //–ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
    public function salesman()
    {
        $uuid = $this->chat->chat_id;
        $buyer = $this->buyerService->getBuyer($uuid);

        if (!$buyer) {
            $this->reply($this->salesmanService->storeSalesman($uuid));

            $this->chat
                ->message('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.</b>')
                ->keyboard(
                    Keyboard::make()->buttons(
                        [
                            Button::make('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä')->action('addNumbers'),
                            Button::make('–°—Ç–∞—Ç—É—Å—ã –Ω–æ–º–µ—Ä–æ–≤')->action('getNumbersStatus'),
                            Button::make('–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')->action('getUserStatistics'),
                            Button::make('–ù–∞–∑–∞–¥')->action('start'),
                        ])
                )
                ->send();
        } else {
            (new ButtonsConstruct($this->chat, "<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.</b>", '–ù–∞–∑–∞–¥', 'start'))->storeButton();
        }

    }

    //–≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    public function addNumbers()
    {
        $this->chat
            ->message('<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞</b>')
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('üîµ Telegram')->action('addNumbersSalesmen')->param('provider', TypeNumberEnum::telegram->name),
                        Button::make('üü¢ WhatsApp')->action('addNumbersSalesmen')->param('provider', TypeNumberEnum::whatsapp->name),
                        Button::make('–ù–∞–∑–∞–¥')->action('salesman'),
                    ])
            )
            ->send();
    }

    //–ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    public function addNumbersSalesmen()
    {
        $provider = $this->data->get('provider');

        //—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        $this->numberStateService->storeAddNumberState($this->chat->chat_id, $provider);

        switch ($provider) {
            case TypeNumberEnum::telegram->name :
                (new ButtonsConstruct($this->chat, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä Telegram –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n\n<b>9003233212</b>\n\n–ö–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏", '–û—Ç–º–µ–Ω–∞', 'salesman'))
                    ->storeButton();
                break;
            case TypeNumberEnum::whatsapp->name :
                (new ButtonsConstruct($this->chat, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä WhatsApp –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n\n<b>9003233212</b>\n\n–ö–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏", '–û—Ç–º–µ–Ω–∞', 'salesman'))
                    ->storeButton();
                break;
        }
    }

    //–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    public function handleChatMessage(Stringable $text): void
    {
        try {
            $create_number = false;
            //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
            $addNumberState = $this->numberStateService->getAddNumberState($this->chat->chat_id);

            if ($addNumberState) {
                $this->processNumberInput($addNumberState);
                $create_number = true;
            }

            //—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–¥–∞
            $codeNumberState = $this->numberStateService->getCodeNumberState($this->chat->chat_id);

            if (!empty($codeNumberState) && !$create_number) {
                $this->processCodeInput();
            }
        } catch (\Exception $exception) {
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            error_log($exception->getMessage());

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            (new ButtonsConstruct($this->chat, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é', '–ù–∞–∑–∞–¥', 'start'))
                ->storeButton();
        }
    }

    //–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
    private function processNumberInput($number_state)
    {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞
            $numbers = $this->message?->text();

            if (empty($numbers)) {
                (new ButtonsConstruct($this->chat, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', '–ù–∞–∑–∞–¥', 'salesman'))
                    ->storeButton();
                //—É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                $this->numberStateService->deleteAddNumberState($this->chat->chat_id);
                return;
            }

            $number_array = explode("\n", $numbers);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            match ($number_state->provider) {
                TypeNumberEnum::telegram->name => $this->saveNumber($number_array, TypeNumberEnum::telegram),
                TypeNumberEnum::whatsapp->name => $this->saveNumber($number_array, TypeNumberEnum::whatsapp),
            };

        } catch (\Exception $exception) {
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            error_log($exception->getMessage());

            // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            $this->numberStateService->deleteAddNumberState($this->chat->chat_id);

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            (new ButtonsConstruct($this->chat, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.', '–ù–∞–∑–∞–¥', 'salesman'))
                ->storeButton();
        }
    }

    //–ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    public function saveNumber($number, $provider)
    {
        $count_numbers = $this->numberStatisticService->getCountNumbers($provider->name);
        $salesman = $this->salesmanService->getSalesman($this->chat->chat_id);
        $this->numberStateService->deleteAddNumberState($this->chat->chat_id);


        if ($salesman) {
            $this->reply("–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—á–µ—Ä–µ–¥—å {$count_numbers} –Ω–æ–º–µ—Ä–æ–≤.");

            $count = 0;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
            foreach ($number as $num) {
                if (preg_match('/^\d{10}$/', $num)) {
                    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ä–æ–≤–Ω–æ 10 —Å–∏–º–≤–æ–ª–æ–≤)
                    $salesman->numbers()->create([
                        'number' => $num,
                        'type_number' => $provider,
                        'status_number' => StatusNumberEnum::pending
                    ]);

                    $count += 1;

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–∞ –æ–∂–∏–¥–∞—é—â–∏–π –∫–æ–¥
                    $this->numberStateService->createStateForNumber($this->chat->chat_id, $num, $provider->name);
                } else {
                    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
                    $this->reply("–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä '{$num}' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 —Å–∏–º–≤–æ–ª–æ–≤.");
                }
            }
        } else {
            $this->chat->message('–û—à–∏–±–∫–∞: –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.')->send();
        }

        (new ButtonsConstruct($this->chat, "<b>–î–æ–±–∞–≤–ª–µ–Ω–æ {$count} –Ω–æ–º–µ—Ä–æ–≤!</b>", '–ù–∞–∑–∞–¥', 'salesman'))
            ->storeButton();
    }

    //–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–¥–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    private function processCodeInput()
    {
        $code = $this->message?->text();
        $number = explode(":", $code);// –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–Ω–æ–º–µ—Ä : –∫–æ–¥"

        if (empty($code) && count($number) != 2) {
            $this->chat->message('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏ –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä : –∫–æ–¥".')->send();
            return;
        }

        $number_input = trim($number[0]);
        $code_input = trim($number[1]);

        //–ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        $necessaryState = $this->numberStateService->getCodeNumberBuyerId($number_input);
        $buyer_id = $necessaryState->buyer_id;

        Telegraph::chat($buyer_id)
            ->message("–ö–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {$necessaryState->number}: {$code_input}")
            ->keyboard(
                Keyboard::make()->buttons([
                    Button::make('–ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')->action('codeReceived')->param('number', $necessaryState->number),
                    Button::make('–ö–æ–¥ –Ω–µ—É—Å–ø–µ—à–µ–Ω')->action('codeFalseReceived')->param('number', $necessaryState->number),
                ])
            )
            ->send();

    }

    //–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏
    public function codeReceived()
    {
        $number_data = $this->data->get('number');

        $this->numberService->updateNumberWithBuyerUuid($number_data, $this->chat->chat_id, StatusNumberEnum::active);

        $this->numberStateService->deleteCodeNumberState($this->chat->chat_id, $number_data);

        (new ButtonsConstruct($this->chat, "<b>–ù–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>", "–ù–∞–∑–∞–¥", "buyNumbers"))->storeButton();
    }

    //–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏
    public function codeFalseReceived()
    {
        $number_data = $this->data->get('number');

        $this->numberService->updateNumberWithBuyerUuid($number_data, $this->chat->chat_id, StatusNumberEnum::failed);

        $this->numberStateService->deleteCodeNumberState($this->chat->chat_id, $number_data);

        (new ButtonsConstruct($this->chat, "<b>–ù–æ–º–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>", "–ù–∞–∑–∞–¥", "buyNumbers"))->storeButton();
    }

    public function getNumbersStatus()
    {
        $this->chat
            ->message('<b>–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–æ–≤</b>')
            ->keyboard(
                Keyboard::make()->buttons(
                    [
                        Button::make('–ê–∫—Ç–∏–≤–Ω—ã–µ')->action('getPendingNumbers'),
                        Button::make('–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã')->action('getDeactivateNumbers'),
                        Button::make('–ö—É–ø–ª–µ–Ω–Ω—ã–µ')->action('getBuyerNumbers'),
                        Button::make('–ù–∞–∑–∞–¥')->action('salesman'),
                    ])
            )
            ->send();

    }

    public function getPendingNumbers()
    {
        $salesmen = $this->salesmanService->getSalesman($this->chat->chat_id);

        $numbers = $this->numberService->getPendingNumbers($salesmen);

        if ($numbers->isEmpty()) {
            $this->reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤');
            return;
        }

        $buttons = [];

        foreach ($numbers as $number) {
            $buttons[] = Button::make($number->number)->action('deleteNumbers')->param('number', $number->number);
        }
        $count_numbers = count($numbers);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
        $this->chat
            ->message("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {$count_numbers}</b>")
            ->keyboard(Keyboard::make()->buttons($buttons)->chunk(2))// –†–∞–∑–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–∏
            ->send();

        (new ButtonsConstruct($this->chat, "<b>–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –æ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω!</b>", "–ù–∞–∑–∞–¥", "getNumbersStatus"))->storeButton();
    }

    public function getDeactivateNumbers()
    {
        $salesmen = $this->salesmanService->getSalesman($this->chat->chat_id);

        $numbers = $this->numberService->getDeactiveStatusNumbers($salesmen);

        if ($numbers->isEmpty()) {
            $this->reply('–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤');
            return;
        }

        $buttons = [];

        foreach ($numbers as $number) {
            $buttons[] = Button::make($number->number)->action('blockNumber');
        }
        $count_numbers = count($numbers);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
        $this->chat
            ->message("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {$count_numbers}</b>")
            ->keyboard(Keyboard::make()->buttons($buttons)->chunk(2)) // –†–∞–∑–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
            ->send();

    }

    public function getNumbersBuyer()
    {
        $numbers = $this->numberService->getWithBuyerNumbers($this->chat->chat_id, StatusNumberEnum::active);
        $buttons = [];

        foreach ($numbers as $number) {
            $buttons[] = Button::make($number->number)->action('disputeNumber')->param('number', $number->number);
        }
        $count_numbers = count($numbers);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
        $this->chat
            ->message("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {$count_numbers}. –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ </b>")
            ->keyboard(Keyboard::make()->buttons($buttons)->chunk(2)) // –†–∞–∑–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
            ->send();
    }

    public function getBuyerNumbers()
    {
        $numbers = $this->numberService->getWithBuyerNumbers($this->chat->chat_id, StatusNumberEnum::active);

        if ($numbers->isEmpty()) {
            $this->reply('–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤');
            return;
        }

        $buttons = [];

        foreach ($numbers as $number) {
            $buttons[] = Button::make($number->number)->action('disputeNumber')->param('number', $number->number);
        }

        $count_numbers = count($numbers);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤
        $this->chat
            ->message("<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {$count_numbers}</b>")
            ->keyboard(Keyboard::make()->buttons($buttons)->chunk(2)) // –†–∞–∑–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
            ->send();


    }

    public function deleteNumbers()
    {
        $this->numberService->deleteNumber($this->data->get('number'));

        $this->chat->deleteMessage($this->messageId)->send();

        $this->reply('–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    }

    public function getUserStatistics()
    {
        $buyer = $this->data->get('buyer');

        if (!$buyer) {
            $salesman = $this->salesmanService->getSalesman($this->chat->chat_id);
            $telegram = $this->numberService->getTelegramNumbers($salesman);
            $whatsapp = $this->numberService->getWhatsAppNumbers($salesman);

            if (count($telegram) > 0) {
                $active = $this->numberService->getTelegramNumbers($salesman, StatusNumberEnum::active);
                $deactivate = $this->numberService->getTelegramNumbers($salesman, StatusNumberEnum::failed);
                $pending = $this->numberService->getTelegramNumbers($salesman, StatusNumberEnum::pending);
                $this->userStatisticsService->createStatistics($salesman->uuid, UserTypeEnum::seller->name, TypeNumberEnum::telegram->name, count($active), count($deactivate), count($pending));
                $message = "<b>üîµ Telegram</b>" .
                    "\n\n–ù–æ–º–µ—Ä–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: " . count($pending) . "\n\n" .
                    "–ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: " . count($active) . "\n\n" .
                    "–°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞: " . count($deactivate);
                $this->chat->message($message)->send();
            }
            if (count($whatsapp) > 0) {
                $active = $this->numberService->getWhatsAppNumbers($salesman, StatusNumberEnum::active);
                $deactivate = $this->numberService->getWhatsAppNumbers($salesman, StatusNumberEnum::failed);
                $pending = $this->numberService->getWhatsAppNumbers($salesman, StatusNumberEnum::pending);
                $this->userStatisticsService->createStatistics($salesman->uuid, UserTypeEnum::seller->name, TypeNumberEnum::whatsapp->name, count($active), count($deactivate), count($pending));
                $message = "<b>üü¢ WhatsApp</b>" .
                    "\n\n–ù–æ–º–µ—Ä–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: " . count($pending) . "\n\n" .
                    "–ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: " . count($active) . "\n\n" .
                    "–°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞: " . count($deactivate);
                $this->chat->message($message)->send();
            }
            if (count($telegram) === 0 && count($whatsapp) === 0) {
                (new ButtonsConstruct($this->chat, "<b>–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</b>", '–ù–∞–∑–∞–¥', 'salesman'))->storeButton();
            }
        } else {
            $telegram = $this->numberService->getWithBuyerNumbers($this->chat->chat_id, null, TypeNumberEnum::telegram);
            $whatsapp = $this->numberService->getWithBuyerNumbers($this->chat->chat_id, null, TypeNumberEnum::whatsapp);

            if (count($telegram) > 0) {
                $active = count($telegram->where('status_number', StatusNumberEnum::active));
                $deactivate = count($telegram->where('status_number', StatusNumberEnum::failed));
                $this->userStatisticsService->createStatistics($this->chat->chat_id, UserTypeEnum::buyer->name, TypeNumberEnum::telegram->name, $active, $deactivate, null);
                $message = "<b>üîµ Telegram</b>" . "\n\n" .
                    "–ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: " . $active . "\n\n" .
                    "–°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞: " . $deactivate;
                $this->chat->message($message)->send();
            }
            if (count($whatsapp) > 0) {
                $active = count($whatsapp->where('status_number', StatusNumberEnum::active));
                $deactivate = count($whatsapp->where('status_number', StatusNumberEnum::failed));
                $this->userStatisticsService->createStatistics($this->chat->chat_id, UserTypeEnum::buyer->name, TypeNumberEnum::whatsapp->name, $active, $deactivate, null);
                $message = "<b>üü¢ WhatsApp</b>" . "\n\n" .
                    "–ö—É–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: " . $active . "\n\n" .
                    "–°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞: " . $deactivate;
                $this->chat->message($message)->send();
            }
            if (count($telegram) === 0 && count($whatsapp) === 0) {
                (new ButtonsConstruct($this->chat, "<b>–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</b>", '–ù–∞–∑–∞–¥', 'storeBuyer'))->storeButton();
            }
        }
    }

    public function blockNumber()
    {
        //
    }

    public function disputeNumber()
    {
        $number = $this->numberService->getWithBuyerNumbers($this->chat->chat_id, StatusNumberEnum::active, null, $this->data->get('number'));

        if (!$number)
            (new ButtonsConstruct($this->chat, '–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', '–ù–∞–∑–∞–¥', 'getNumbersBuyer'))
                ->storeButton();

        $updateAt = Carbon::parse($number->updated_at);
        $now = Carbon::now();

        if ($now->diffInMinutes($updateAt) > 10) {
            (new ButtonsConstruct($this->chat, "–ù–æ–º–µ—Ä {$number->number} —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω", '–ù–∞–∑–∞–¥', 'getNumbersBuyer'))
                ->storeButton();
        } else {
            $salesman_chat = $number->salesman->uuid;
            Telegraph::chat($salesman_chat)
                ->message("–ù–æ–º–µ—Ä {$number->number} —É—à–µ–ª –≤ –¥–∏—Å—Ç—É—Ç.")
                ->send();
            $number->update(['status_number' => StatusNumberEnum::failed]);
            (new ButtonsConstruct($this->chat, "–ù–æ–º–µ—Ä {$number->number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–∏—Å–ø—É—Ç", '–ù–∞–∑–∞–¥', 'getNumbersBuyer'))
                ->storeButton();
        }

    }

}
